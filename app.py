import requests
import json
import re
import csv
import time
import datetime
import os

# ‚úÖ API-–∫–ª—é—á Perplexity AI
PERPLEXITY_API_KEY = "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"

# ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å Perplexity AI
MODEL_NAME = "sonar-reasoning-pro"

# ‚úÖ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CAR_MODELS_FILE = "car_models.txt"
OUTPUT_CSV = "car_reviews.csv"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ (—Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏)
def generate_full_review(query):
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system", "content": "–¢—ã - –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç"},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –≤—Å–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è {query} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."}
        ],
        "max_tokens": 2000,
        "temperature": 0.5,
        "top_p": 0.9
    }

    attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    for attempt in range(1, attempts + 1):
        try:
            print(f"üîÑ [{query}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{attempts} –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
            response = requests.post(url, headers=headers, json=payload, timeout=60)

            if response.status_code == 200:
                print(f"‚úÖ [{query}] –û–±–∑–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                return response.json()["choices"][0]["message"]["content"]
            else:
                print(f"‚ùå [{query}] –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

        except requests.exceptions.RequestException as e:
            print(f"‚ö† [{query}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    print(f"‚õî [{query}] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å.")
    return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ –¥–ª—è {query} - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    text = re.sub(r"\[\d+\]", "", text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ [1], [2]
    text = re.sub(r"\*\*", "", text)  # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ **
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è AI
    text = re.sub(r"\n{2,}", "\n\n", text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"SEO-–∫–ª—é—á–∏:.*$", "", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ "SEO-–∫–ª—é—á–∏"
    return text.strip()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
def load_car_models():
    if not os.path.exists(CAR_MODELS_FILE):
        print(f"‚ùå –§–∞–π–ª {CAR_MODELS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    
    with open(CAR_MODELS_FILE, "r", encoding="utf-8") as file:
        return [line.strip() for line in file.readlines() if line.strip()]

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å CSV (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
def should_reset_csv():
    if not os.path.exists(OUTPUT_CSV):
        return True  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π

    last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(OUTPUT_CSV))
    current_date = datetime.datetime.now()
    
    return last_modified.month != current_date.month  # –ï—Å–ª–∏ –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–∑–æ—Ä–æ–≤ –≤ CSV (–∑–∞–ø–∏—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
def save_to_csv(reviews):
    file_exists = os.path.exists(OUTPUT_CSV)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ
    headers_needed = True
    if file_exists:
        with open(OUTPUT_CSV, "r", encoding="utf-8") as file:
            first_line = file.readline().strip()
            expected_headers = "id,date,title,review,mark,model"
            if first_line == expected_headers:
                headers_needed = False  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ –µ—Å—Ç—å

    with open(OUTPUT_CSV, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)

        # **–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç**
        if headers_needed:
            writer.writerow(["id", "date", "title", "review", "mark", "model"])
            print("üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ CSV.")

        # **–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID**
        existing_reviews = []
        if file_exists:
            with open(OUTPUT_CSV, "r", encoding="utf-8") as existing_file:
                reader = csv.reader(existing_file)
                existing_reviews = list(reader)

        last_id = int(existing_reviews[-1][0]) if len(existing_reviews) > 1 else 0  # –ü–æ—Å–ª–µ–¥–Ω–∏–π ID

        # **–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±–∑–æ—Ä—ã**
        for i, (title, review, mark, model) in enumerate(reviews, start=last_id + 1):
            writer.writerow([i, datetime.datetime.now().strftime("%Y-%m-%d"), title, review, mark, model])

    # **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è GitHub Actions**
    with open(OUTPUT_CSV, "a", encoding="utf-8") as f:
        f.write("\n")

    print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {OUTPUT_CSV}")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def main():
    car_models = load_car_models()
    if not car_models:
        print("‚ö† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    for model in car_models:
        print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ–ª–∏: {model}")

        # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å
        parts = model.split(maxsplit=1)
        if len(parts) < 2:
            print(f"‚ö† –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {model}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        mark, model_name = parts

        review = generate_full_review(model)

        if review:
            clean_review = clean_text(review)
            print(f"‚úÖ –û–±–∑–æ—Ä {model} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            save_to_csv(f"–û–±–∑–æ—Ä {model}: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã", clean_review, mark, model_name)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ –¥–ª—è {model}")

        time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

if __name__ == "__main__":
    main()
