import requests
import json
import re
import csv
import time
import datetime
import os
from concurrent.futures import ThreadPoolExecutor, as_completed

# ‚úÖ API-–∫–ª—é—á Perplexity AI
PERPLEXITY_API_KEY = "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"

# ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å Perplexity AI
MODEL_NAME = "sonar-reasoning-pro"

# ‚úÖ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CAR_MODELS_FILE = "car_models.txt"
OUTPUT_CSV = "car_reviews.csv"

# ‚úÖ –ß–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 5)
MAX_THREADS = 5

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞
def generate_full_review(query):
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system", "content": "–¢—ã - –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç."},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –≤—Å–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è {query} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."}
        ],
        "max_tokens": 2000,
        "temperature": 0.5,
        "top_p": 0.9
    }

    attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    for attempt in range(1, attempts + 1):
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=60)
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {query}: {response.text}")
        except requests.exceptions.RequestException as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{attempts} - –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")

        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ –¥–ª—è {query} - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    text = re.sub(r"\[\d+\]", "", text)
    text = re.sub(r"\*\*", "", text)
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)
    text = re.sub(r"\n{2,}", "\n\n", text)
    text = re.sub(r"SEO-–∫–ª—é—á–∏:.*$", "", text, flags=re.MULTILINE)
    return text.strip()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
def load_car_models():
    if not os.path.exists(CAR_MODELS_FILE):
        print(f"‚ùå –§–∞–π–ª {CAR_MODELS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    
    with open(CAR_MODELS_FILE, "r", encoding="utf-8") as file:
        return [line.strip().split(" ", 1) for line in file.readlines() if line.strip()]

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å CSV (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
def should_reset_csv():
    if not os.path.exists(OUTPUT_CSV):
        return True  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π

    last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(OUTPUT_CSV))
    current_date = datetime.datetime.now()
    
    return last_modified.month != current_date.month  # –ï—Å–ª–∏ –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
def save_review_to_csv(review_data):
    file_exists = os.path.exists(OUTPUT_CSV)

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    if should_reset_csv():
        print("üìå –ù–æ–≤—ã–π –º–µ—Å—è—Ü! –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–∑–æ—Ä—ã...")
        os.remove(OUTPUT_CSV) if os.path.exists(OUTPUT_CSV) else None
        file_exists = False

    with open(OUTPUT_CSV, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ, –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not file_exists:
            writer.writerow(["id", "date", "title", "review", "mark", "model"])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ
        existing_reviews = []
        if os.path.exists(OUTPUT_CSV):
            with open(OUTPUT_CSV, "r", encoding="utf-8") as existing_file:
                reader = csv.reader(existing_file)
                existing_reviews = list(reader)

        last_id = int(existing_reviews[-1][0]) if len(existing_reviews) > 1 else 0

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV
        review_data.insert(0, last_id + 1)  # –î–æ–±–∞–≤–ª—è–µ–º ID
        writer.writerow(review_data)

    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ CSV: {review_data[2]}")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)
def main():
    car_models = load_car_models()
    if not car_models:
        print("‚ö† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        future_to_model = {executor.submit(generate_full_review, f"{mark} {model}"): (mark, model) for mark, model in car_models}

        for future in as_completed(future_to_model):
            mark, model = future_to_model[future]
            try:
                review = future.result()
                if review:
                    clean_review = clean_text(review)
                    title = f"–û–±–∑–æ—Ä {mark} {model}: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã"
                    date = datetime.datetime.now().strftime("%Y-%m-%d")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    save_review_to_csv([date, title, clean_review, mark, model])
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {mark} {model}: {e}")

if __name__ == "__main__":
    main()
