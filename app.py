import requests
import json
import re
import csv
import time
import datetime
import os

# ‚úÖ API-–∫–ª—é—á Perplexity
PERPLEXITY_API_KEY = "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"

# ‚úÖ –ú–æ–¥–µ–ª—å Perplexity
MODEL_NAME = "sonar-small-chat"

# ‚úÖ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CAR_MODELS_FILE = "car_models.txt"
OUTPUT_CSV = "car_reviews.csv"

# ‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
skipped_models = []

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ (1 –ø–æ–ø—ã—Ç–∫–∞, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
def generate_full_review(query):
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system", "content": "–¢—ã - –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç"},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –≤—Å–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è {query} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."}
        ],
        "max_tokens": 2000,
        "temperature": 0.5,
        "top_p": 0.9
    }

    print(f"üì° [{query}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ API...")
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=60)

        if response.status_code == 200:
            print(f"‚úÖ [{query}] –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω!")
            return response.json()["choices"][0]["message"]["content"]
        else:
            print(f"‚ùå [{query}] –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None

    except requests.exceptions.Timeout:
        print(f"‚è≥ [{query}] –¢–∞–π–º-–∞—É—Ç 60 —Å–µ–∫! API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ú–∞—à–∏–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        skipped_models.append(query)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
        return None

    except requests.exceptions.RequestException as e:
        print(f"‚ö† [{query}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        skipped_models.append(query)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
        return None

# ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ
def ensure_csv_headers():
    if not os.path.exists(OUTPUT_CSV) or os.stat(OUTPUT_CSV).st_size == 0:
        with open(OUTPUT_CSV, "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["id", "date", "title", "review", "mark", "model"])
        print("üìå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ CSV.")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    text = re.sub(r"\[\d+\]", "", text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ [1], [2]
    text = re.sub(r"\*\*", "", text)  # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ **
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è AI
    text = re.sub(r"SEO-–∫–ª—é—á–∏:.*$", "", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ "SEO-–∫–ª—é—á–∏"

    # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (===, ##, ---)
    text = re.sub(r"^(?:===|#)+\s*", "", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º === –∏ ##
    text = re.sub(r"^-{3,}", "", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º "---"
    
    # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    text = re.sub(r"\n{2,}", "\n\n", text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    return text.strip()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–∑–æ—Ä–æ–≤ –≤ CSV
def save_to_csv(title, review, mark, model):
    ensure_csv_headers()
    
    with open(OUTPUT_CSV, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
        last_id = 0
        with open(OUTPUT_CSV, "r", encoding="utf-8") as existing_file:
            reader = csv.reader(existing_file)
            existing_reviews = list(reader)
            if len(existing_reviews) > 1:
                try:
                    last_id = int(existing_reviews[-1][0])
                except ValueError:
                    last_id = 0

        writer.writerow([last_id + 1, datetime.datetime.now().strftime("%Y-%m-%d"), title, review, mark, model])

    print(f"‚úÖ [{mark} {model}] –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ CSV")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å (1 –º–∞—à–∏–Ω–∞ –∑–∞ —Ä–∞–∑, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
def main():
    with open(CAR_MODELS_FILE, "r", encoding="utf-8") as file:
        car_models = [line.strip() for line in file.readlines() if line.strip()]

    if not car_models:
        print("‚ö† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    print(f"üîÑ –í—Å–µ–≥–æ –º–∞—à–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(car_models)}")

    for idx, model in enumerate(car_models, 1):
        print(f"üöó [{idx}/{len(car_models)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {model}")

        parts = model.split(maxsplit=1)
        if len(parts) < 2:
            print(f"‚ö† –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {model}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            skipped_models.append(model)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
            continue
        mark, model_name = parts

        review = generate_full_review(model)
        if review:
            clean_review = clean_text(review)
            save_to_csv(f"–û–±–∑–æ—Ä {model}: –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã", clean_review, mark, model_name)
        else:
            print(f"‚ùå [{idx}/{len(car_models)}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞.")
            skipped_models.append(model)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö

        time.sleep(30)  # **–ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –º–∞—à–∏–Ω—ã**

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
    if skipped_models:
        print("\n‚õî **–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã:**")
        for car in skipped_models:
            print(f"üö® {car}")
    else:
        print("\n‚úÖ **–í—Å–µ –º–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!**")

if __name__ == "__main__":
    main()
