import requests
import json
import re
import csv
import time
import datetime
import os

# ‚úÖ API-–∫–ª—é—á Perplexity AI
PERPLEXITY_API_KEY = "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"

# ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å Perplexity AI
MODEL_NAME = "sonar-reasoning-pro"

# ‚úÖ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CAR_MODELS_FILE = "/Users/juliakriv/otzyvy/car_models.txt"
OUTPUT_CSV = "/Users/juliakriv/otzyvy/car_reviews.csv"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ (—Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏)
def generate_full_review(query):
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "system", "content": "–¢—ã - –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–∑–æ—Ä—ã, –±–µ–∑ –≤–æ–¥—ã –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π."},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è {query} –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤. "
                                         f"–í—ã–¥–µ–ª–∏ –ª–æ–≥–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: –¥–∏–∑–∞–π–Ω, –∏–Ω—Ç–µ—Ä—å–µ—Ä, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ. "
                                         f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –∞–±–∑–∞—Ü—ã, —Ç–∞–±–ª–∏—Ü—ã. "
                                         f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **, <think>, —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ [1], [2]."}
        ],
        "max_tokens": 2000,
        "temperature": 0.5,
        "top_p": 0.9
    }

    attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    for attempt in range(1, attempts + 1):
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=60)  # ‚è≥ –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {query}: {response.text}")
        except requests.exceptions.RequestException as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{attempts} - –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")

        time.sleep(5)  # ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ –¥–ª—è {query} - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text):
    text = re.sub(r"\[\d+\]", "", text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ [1], [2]
    text = re.sub(r"\*\*", "", text)  # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ **
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è AI
    text = re.sub(r"\n{2,}", "\n\n", text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"SEO-–∫–ª—é—á–∏:.*$", "", text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ "SEO-–∫–ª—é—á–∏"
    return text.strip()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
def load_car_models():
    if not os.path.exists(CAR_MODELS_FILE):
        print(f"‚ùå –§–∞–π–ª {CAR_MODELS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    
    with open(CAR_MODELS_FILE, "r", encoding="utf-8") as file:
        return [line.strip() for line in file.readlines() if line.strip()]

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å CSV (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
def should_reset_csv():
    if not os.path.exists(OUTPUT_CSV):
        return True  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π

    last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(OUTPUT_CSV))
    current_date = datetime.datetime.now()
    
    return last_modified.month != current_date.month  # –ï—Å–ª–∏ –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–∑–æ—Ä–æ–≤ –≤ CSV
def save_to_csv(reviews):
    reset_csv = should_reset_csv()

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    if reset_csv:
        print("üìå –ù–æ–≤—ã–π –º–µ—Å—è—Ü! –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–∑–æ—Ä—ã...")
        os.remove(OUTPUT_CSV) if os.path.exists(OUTPUT_CSV) else None

    with open(OUTPUT_CSV, "a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ, –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if reset_csv or os.stat(OUTPUT_CSV).st_size == 0:
            writer.writerow(["id", "–¥–∞—Ç–∞", "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "—Ç–µ–∫—Å—Ç"])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ
        existing_reviews = []
        if not reset_csv and os.path.exists(OUTPUT_CSV):
            with open(OUTPUT_CSV, "r", encoding="utf-8") as existing_file:
                reader = csv.reader(existing_file)
                existing_reviews = list(reader)

        last_id = int(existing_reviews[-1][0]) if len(existing_reviews) > 1 else 0  # –ü–æ—Å–ª–µ–¥–Ω–∏–π ID

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±–∑–æ—Ä—ã
        for i, (title, text) in enumerate(reviews, start=last_id + 1):
            writer.writerow([i, datetime.datetime.now().strftime("%Y-%m-%d"), title, text])

    print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {OUTPUT_CSV}")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def main():
    car_models = load_car_models()
    if not car_models:
        print("‚ö† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    reviews = []
    for model in car_models:
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–∑–æ—Ä–∞: {model}...")
        review = generate_full_review(model)

        if review:
            clean_review = clean_text(review)
            reviews.append((f"–û–±–∑–æ—Ä {model}: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã", clean_review))

        time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    save_to_csv(reviews)

if __name__ == "__main__":
    main()
